var relearn_search_index = [
  {
    "breadcrumb": "Streaming Data",
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/basics/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Kafka Consumer Proxy",
    "uri": "/kafka-consumer-proxy/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Kafka Rest Proxy",
    "uri": "/kafka-rest-proxy/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Zookeeper",
    "content": "Let’s face it: Writing content for the web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\nMarkdown is simple to learn, with minimal extra characters so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid HTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this:\nThe overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. John Gruber\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\nTip Bookmark this page and the official Commonmark reference for easy future reference!\nParagraphs In Markdown your content usually spans the whole available document width. This is called a block. Blocks are always separated by whitespace to their adjacent blocks in the resulting document.\nAny text not starting with a special sign is written as normal, plain text paragraph block and must be separated to its adjacent blocks by empty lines.\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. Result Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus.\nEt legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\nHeadings A good idea is to structure your content using headings and subheadings. HTML-headings from h1 through h6 are constructed with a # for each level.\nIn Hugo you usually don’t use h1 as this is generated by your theme and you should only have one such element in a document.\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading Result h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Horizontal Rules To further structure your content you can add horizontal rules. They create a “thematic break” between paragraph blocks. In Markdown, you can create it with three consecutive dashes ---.\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. --- Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. Result Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus.\nEt legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\nText Markers Bold You can show importance of a snippet of text with a heavier font-weight by enclosing it with two asterisks **.\nI am rendered with **bold text** Result I am rendered with bold text\nItalics You can emphasize a snippet of text with italics by enclosing it with underscores _.\nI am rendered with _italicized text_ Result I am rendered with italicized text\nStrikethrough In GFM (GitHub Flavored Markdown) you can do strikethroughs by enclosing text with two tildes ~~.\n~~Strike through this text~~ Result Strike through this text\nText substitution This Markdown dialect supports an extension to combine multiple punctuation characters to single typographic entities. This will only be applied to text outside of code blocks or inline code.\nDouble quotes `\"` and single quotes `'` of enclosed text are replaced by **\"double curly quotes\"** and **'single curly quotes'**. Double dashes `--` and triple dashes `---` are replaced by en-dash **--** and em-dash **---** entities. Double arrows pointing left `\u003c\u003c` or right `\u003e\u003e` are replaced by arrow **\u003c\u003c** and **\u003e\u003e** entities. Three consecutive dots `...` are replaced by an ellipsis **...** entity. Result Double quotes \" and single quotes ' of enclosed text are replaced by “double curly quotes” and ‘single curly quotes’.\nDouble dashes -- and triple dashes --- are replaced by en-dash – and em-dash — entities.\nDouble arrows pointing left \u003c\u003c or right \u003e\u003e are replaced by arrow « and » entities.\nThree consecutive dots ... are replaced by an ellipsis … entity.\nLists Unordered You can write a list of items in which the order of the items does not explicitly matter.\nIt is possible to nest lists by indenting an item for the next sublevel.\nYou may use any of -, * or + to denote bullets for each list item but should not switch between those symbols inside one whole list.\n- Lorem ipsum dolor sit amet - Consectetur adipiscing elit - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at - Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Faucibus porta lacus fringilla vel Result Lorem ipsum dolor sit amet Consectetur adipiscing elit Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Faucibus porta lacus fringilla vel Ordered You can create a list of items in which the order of items does explicitly matter.\nIt is possible to nest lists by indenting an item for the next sublevel.\nMarkdown will automatically number each of your items consecutively. This means, the order number you are providing is irrelevant.\n1. Lorem ipsum dolor sit amet 3. Consectetur adipiscing elit 1. Integer molestie lorem at massa 7. Facilisis in pretium nisl aliquet 99. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 17. Eget porttitor lorem Result Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem Tasks In GFM (GitHub Flavored Markdown) you can add task lists resulting in checked or unchecked non-clickable items\n- [x] Basic Test - [ ] More Tests - [x] View - [x] Hear - [ ] Smell Result Basic Test More Tests View Hear Smell Definitions This Markdown dialect supports an extension to add definition lists. Definition lists are made of terms and definitions of these terms, much like in a dictionary.\nA definition list in Markdown Extra is made of a single-line term followed by a colon and the definition for that term. You can also associate more than one term to a definition.\nIf you add empty lines around the definition terms, additional vertical space will be generated. Also multiple paragraphs are possible\nApple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. : An American computer company. Orange : The fruit of an evergreen tree of the genus Citrus. You can make juice out of it. : A telecommunication company. You can't make juice out of it. Result Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. An American computer company. Orange The fruit of an evergreen tree of the genus Citrus. You can make juice out of it.\nA telecommunication company. You can’t make juice out of it.\nCode Inline Code Inline snippets of code can be wrapped with backticks `.\nIn this example, `\u003cdiv\u003e\u003c/div\u003e` is marked as code. Result In this example, \u003cdiv\u003e\u003c/div\u003e is marked as code.\nIndented Code Block A simple code block can be generated by indenting several lines of code by at least two spaces.\nBe impressed by my advanced code: // Some comments line 1 of code line 2 of code line 3 of code Result Be impressed by my advanced code:\n// Some comments line 1 of code line 2 of code line 3 of code Fenced Code Block If you want to gain more control of your code block you can enclose your code by at least three backticks ``` a so called fence.\nIn GFM (GitHub Flavored Markdown) you can also add a language specifier directly after the opening fence, ```js, and syntax highlighting will automatically be applied according to the selected language in the rendered HTML.\n```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` Result grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Tables In GFM (GitHub Flavored Markdown) you can create tables by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | |--------|-------------| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | Result Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Aligned Columns Adding a colon on the left and/or right side of the dashes below any heading will align the text for that column accordingly.\n| Option | Number | Description | |-------:|:------:|:------------| | data | 1 | path to data files to supply the data that will be passed into templates. | | engine | 2 | engine to be used for processing templates. Handlebars is the default. | | ext | 3 | extension to be used for dest files. | Result Option Number Description data 1 path to data files to supply the data that will be passed into templates. engine 2 engine to be used for processing templates. Handlebars is the default. ext 3 extension to be used for dest files. Blockquotes For quoting blocks of content from another source within your document add \u003e before any text you want to quote.\nBlockquotes can also be nested.\n\u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e \u003e \u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. \u003e \u003e Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus. Result Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\nSed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\nMauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\nLinks Autolink In GFM (GitHub Flavored Markdown) absolute URLs will automatically be converted into a link.\nThis is a link to https://example.com. Result This is a link to https://example.com.\nBasic Link You can explicitly define links in case you want to use non-absolute URLs or want to give different text.\n[Assemble](http://assemble.io) Result Assemble\nLink with Tooltip For even further information, you can add an additional text, displayed in a tooltip on hovering over the link.\n[Upstage](https://github.com/upstage/ \"Visit Upstage!\") Result Upstage\nLink References Links can be simplyfied for recurring reuse by using a reference ID to later define the URL location. This simplyfies writing if you want to use a link more than once in a document.\n[Example][somelinkID] [somelinkID]: https://example.com \"Go to example domain\" Result Example\nFootnotes Footnotes work mostly like reference-style links. A footnote is made of two things, a marker in the text that will become a superscript number and a footnote definition that will be placed in a list of footnotes.\nUsually the list of footnotes will be shown at the end of your document. If we use a footnote in a notice box it will instead be listed at the end of its box.\nFootnotes can contain block elements, which means that you can put multiple paragraphs, lists, blockquotes and so on in a footnote. It works the same as for list items, just indent the following paragraphs by four spaces in the footnote definition.\nThat's some text with a footnote[^1] [^1]: And that's the footnote. That's some more text with a footnote.[^someid] [^someid]: Anything of interest goes here. Blue light glows blue. Result That’s some text with a footnote1\nThat’s some more text with a footnote.2\nAnd that’s the footnote. ↩︎\nAnything of interest goes here.\nBlue light glows blue. ↩︎\nImages Basic Images Images have a similar syntax to links but include a preceding exclamation mark.\n![Spock](https://octodex.github.com/images/spocktocat.png) Result Image with Tooltip Like links, images can also be given a tooltip.\n![Picard](https://octodex.github.com/images/jean-luc-picat.jpg \"Jean Luc Picard\") Result Image References Images can also be linked by reference ID to later define the URL location. This simplyfies writing if you want to use an image more than once in a document.\n![La Forge][laforge] [laforge]: https://octodex.github.com/images/trekkie.jpg \"Geordi La Forge\" Result Image Effects Resizing Add query parameter width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20vw) Result ![Minion](https://octodex.github.com/images/minion.png?height=50px) Result ![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026width=40vw) Result CSS Classes Add a query parameter classes to the link image to add CSS classes. Add some of the predefined values or even define your own in your CSS.\nShadow ![Spidertocat](https://octodex.github.com/images/spidertocat.png?classes=shadow) Result Border ![DrOctocat](https://octodex.github.com/images/droctocat.png?classes=border) Result Left ![Supertocat](https://octodex.github.com/images/okal-eltocat.jpg?classes=left) Result Right ![Riddlocat](https://octodex.github.com/images/riddlocat.jpg?classes=right) Result Inline ![Spidertocat](https://octodex.github.com/images/spidertocat.png?classes=inline) ![DrOctocat](https://octodex.github.com/images/droctocat.png?classes=inline) ![Supertocat](https://octodex.github.com/images/okal-eltocat.jpg?classes=inline) ![Riddlocat](https://octodex.github.com/images/riddlocat.jpg?classes=inline) Result Combination ![X-tocat](https://octodex.github.com/images/xtocat.jpg?classes=shadow,border,left) Result Lightbox Add the query parameter lightbox=false to the image link to disable the lightbox.\n![Homercat](https://octodex.github.com/images/homercat.png?lightbox=false) Result Note If you want to wrap an image in a link and lightbox=true is your default setting, you have to explicitly disable the lightbox to avoid it to hijacking your link like:\n[![Homercat](https://octodex.github.com/images/homercat.png?lightbox=false)](https://octodex.github.com/#homercat)\n",
    "description": "",
    "tags": [
      "Content"
    ],
    "title": "Markdown syntax",
    "uri": "/zookeeper/markdown/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Zookeeper",
    "uri": "/zookeeper/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Zookeeper",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/zookeeper/introduction/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Streaming Data",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Zookeeper",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Usage",
    "uri": "/zookeeper/usage/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Kafka Rest Proxy",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/kafka-rest-proxy/introduction/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Kafka Rest Proxy",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Usage",
    "uri": "/kafka-rest-proxy/usage/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Kafka Consumer Proxy",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Usage",
    "uri": "/kafka-consumer-proxy/usage/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Kafka Consumer Proxy",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Introduction",
    "uri": "/kafka-consumer-proxy/introduction/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Basics",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Contact",
    "uri": "/basics/contact/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Basics",
    "content": "",
    "description": "",
    "tags": null,
    "title": "General Guide",
    "uri": "/basics/general-guide/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Content",
    "uri": "/tags/content/index.html"
  },
  {
    "breadcrumb": "Streaming Data \u003e ",
    "content": "Contributors Special thanks to everyone who has contributed to this project.\nMany thanks to Mathieu Cornic for his work on porting the Learn theme to Hugo.\nMany thanks to Andy Miller for initially creating the Learn theme for Grav.\nTheme Dependencies autoComplete - A lightweight and powerful vanilla JavaScript completion suggester clipboard.js - A modern approach to copy text to clipboard d3-zoom - Pan and zoom SVG, HTML or Canvas using mouse or touch input - plus dependencies d3-color - Color spaces! RGB, HSL, Cubehelix, CIELAB, and more d3-dispatch - Register named callbacks and call them with arguments d3-ease - Easing functions for smooth animation d3-interpolate - Interpolate numbers, colors, strings, arrays, objects, whatever d3-selection - Transform the DOM by selecting elements and joining to data d3-timer - An efficient queue for managing thousands of concurrent animations d3-transition - Animated transitions for D3 selections d3-drag - Drag and drop SVG, HTML or Canvas using mouse or touch input Font Awesome - The internet’s icon library and toolkit js-yaml - JavaScript YAML parser and dumper Lunr - Enables a great search experience without the need for external, server-side, search services Lunr Languages - A collection of languages stemmers and stopwords for Lunr Javascript library MathJax - Beautiful math and chemical formulae in all browsers Mermaid - Generation of diagram and flowchart from text in a similar manner as markdown Perfect Scrollbar - A minimalistic but perfect custom scrollbar plugin SwaggerUI - Generate beautiful documentation from a Swagger-compliant API WorkSans - Work Sans is a 9 weight typeface family based loosely on early Grotesques Docs Dependencies github-buttons - Unofficial github:buttons Tooling Dependencies GitHub - Continuous deployment, testing and hosting of this project’s sources and its documentation Various GitHub Actions https://github.com/actions/setup-node https://github.com/Akkjon/close-milestone https://github.com/andstor/file-reader-action https://github.com/ashley-taylor/regex-property-action https://github.com/Kaven-Universe/github-action-current-date-time https://github.com/mingjun97/file-regex-replace https://github.com/octokit/graphql-action https://github.com/peaceiris/actions-gh-pages https://github.com/peaceiris/actions-hugo https://github.com/WyriHaximus/github-action-create-milestone https://github.com/WyriHaximus/github-action-next-semvers gren - A releasenotes generator for GitHub Hugo - The static site generator of your choice ",
    "description": "",
    "tags": null,
    "title": "Credits",
    "uri": "/more/credits/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Schema Service",
    "uri": "/schema-service/index.html"
  },
  {
    "breadcrumb": "Streaming Data",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
